# syntax = docker/dockerfile:1

# Simple Cal.com Web App Dockerfile for EasyPanel

ARG NODE_VERSION=18.20.3
FROM node:${NODE_VERSION}-slim as base

WORKDIR /app
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=6144"
ENV NEXT_TELEMETRY_DISABLED=1
ENV DISABLE_WEBPACK_CACHE=1

# ----- Build stage -----
FROM base as build

# Install build dependencies
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
    build-essential \
    openssl \
    pkg-config \
    python-is-python3 \
    git \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy repo manifests and workspaces before install (Yarn workspaces need them present)
COPY package.json yarn.lock .yarnrc.yml turbo.json ./
COPY /.yarn ./.yarn
COPY apps/web ./apps/web
COPY packages ./packages
# Include tests dir needed by some type-only imports during build
COPY tests ./tests
# Required for types imported during web build
COPY playwright.config.ts ./playwright.config.ts

# Enable Corepack (Yarn 3) and install dependencies
RUN corepack enable && corepack prepare yarn@3.4.1 --activate
ENV YARN_ENABLE_GLOBAL_CACHE=1
ENV YARN_NM_MODE=hardlinks-local
RUN yarn config set nodeLinker node-modules && \
    yarn config set enableGlobalCache false && \
    yarn config set nmMode hardlinks-local && \
    yarn install --inline-builds

# (already copied sources above)

# Set minimal environment variables needed for build
ENV NEXTAUTH_SECRET="build-time-secret-will-be-overridden-at-runtime-32chars"
ENV CALENDSO_ENCRYPTION_KEY="0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
ENV NEXTAUTH_URL="http://localhost:3000/api/auth"
ENV NEXT_PUBLIC_WEBAPP_URL="http://localhost:3000"
ENV EMAIL_FROM="Cal.com <build@localhost>"
ENV DATABASE_URL="postgresql://build:build@localhost:5432/build"

# Build the application (ignore TS/ESLint errors like test-only imports)
ENV CI=1
RUN yarn turbo run build --filter=@calcom/web

# ----- Runtime stage -----
FROM base as runtime

# Install runtime dependencies
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends openssl curl && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Ensure Yarn 3 is available at runtime (avoids Yarn classic 1.x engine errors)
RUN corepack enable && corepack prepare yarn@3.4.1 --activate

# Copy built application
COPY --from=build /app/package.json ./package.json
COPY --from=build /app/yarn.lock ./yarn.lock
# Yarn Berry project metadata required for `yarn run ...` at runtime
COPY --from=build /app/.yarn ./\.yarn
COPY --from=build /app/.yarnrc.yml ./
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/turbo.json ./turbo.json

# Copy web app
COPY --from=build /app/apps/web/package.json ./apps/web/package.json
COPY --from=build /app/apps/web/next.config.js ./apps/web/next.config.js
COPY --from=build /app/apps/web/next-i18next.config.js ./apps/web/next-i18next.config.js
COPY --from=build /app/apps/web/pagesAndRewritePaths.js ./apps/web/pagesAndRewritePaths.js
COPY --from=build /app/apps/web/getSubdomainRegExp.js ./apps/web/getSubdomainRegExp.js
COPY --from=build /app/apps/web/.next ./apps/web/.next
COPY --from=build /app/apps/web/public ./apps/web/public

# Copy shared packages
COPY --from=build /app/packages ./packages

# Create startup script
RUN cat << 'EOF' > /app/start.sh
#!/bin/bash
set -ex

echo "üöÄ Starting Cal.com..."

# Run database migrations
echo "üìä Running database migrations..."
yarn db-deploy
echo "‚úÖ DB migrations completed"

# Seed app store
echo "üè™ Seeding app store..."
cd packages/prisma && yarn seed-app-store && cd ../..

# Start the web application
echo "üåê Starting web server on port ${PORT:-3000}..."
exec yarn workspace @calcom/web start
EOF

RUN chmod +x /app/start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:${PORT:-3000}/ || exit 1

# Expose port
EXPOSE 3000

# Start the application
CMD ["/app/start.sh"]
